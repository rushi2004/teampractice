Use lists and tuples with numbers (Chapter 3) and strings (Chapter 5) to represent 
elements in the real world with great variety.
easy, moderate, difficult, hard 
time 
File naming convention ex_7_123_years_list.py

7.1 Create a list called years_list, starting with the year of your birth, 
and each year thereafter until the year of your fifth birthday. 
For example, if you were born in 1980, the list would be years_list = 
[1980, 1981, 1982, 1983, 1984, 1985]. If you’re less than five years old and reading this book, 
I don’t know what to tell you. print the list.
moderate : 5 mins 

ex_7_123_years_list.py
7.2 In which year in years_list was your third birthday? 
Remember, you were 0 years of age for your first year.
easy : 5 mins 

7.3 In which year in years_list were you the oldest?
easy : 5 mins 

ex_7_4567_things.py
7.4 Make a list called things with these three strings as elements: 
"mozzarella", "cinderella", "salmonella".
simple : 5 mins 

ex_7_4567_things.py
7.5 Capitalize the element in things that refers to a person and then print the list. 
Did it change the element in the list? Do it two different ways using for loop and list comprehension.
modreate : 10 mins

ex_7_4567_things.py
7.6 Make the cheesy element of things all uppercase and then print the list.
Do it two different ways using for loop and list comprehension. print statements must be clear. 

ex_7_4567_things.py
7.7 Delete the disease element from things, collect your Nobel Prize(print), and print the list.
modreate : 10 mins

ex_7_89_things.py
7.8 Create a list called surprise with the elements "Groucho", "Chico", and "Harpo".
simple : 5 mins 

ex_7_89_things.py
7.9 Lowercase the last element of the surprise list, reverse it, and then capitalize it.
simple : 5 mins. 

ex_10_evens.py
7.10 Use a list comprehension to make a list called even of the even numbers in range(10).
simple: 5 mins. 


7.11 Let’s create a jump rope rhyme maker. You’ll print a series of 
two-line rhymes. Start with this program fragment:

start1 = ["fee", "fie", "foe"]
rhymes = [
    ("flop", "get a mop"),
    ("fope", "turn the rope"),
    ("fa", "get your ma"),
    ("fudge", "call the judge"),
    ("fat", "pet the cat"),
    ("fog", "walk the dog"),
    ("fun", "say we're done"),
    ]
start2 = "Someone better"

For each tuple (first, second) in rhymes:

For the first line:

Print each string in start1, capitalized and followed by an exclamation point and a space.
Print first, also capitalized and followed by an exclamation point.

For the second line:
Print start2 and a space.
Print second and a period.
moderate : 20 mins


75 mins

1)
Write a function that takes a list or tuple of numbers. Return a two-element list, 
containing (respectively) the sum of the even-indexed numbers and the sum of 
the odd-indexed numbers. 
So calling the function as even_odd_sums([10, 20, 30, 40, 50, 60]), 
you’ll get back [90, 120].

moderate : 10 mins 

2) Write a function that takes a list or tuple of numbers. Return the result of alternately 
adding and subtracting numbers from each other. So calling the function as 
plus_minus([10, 20, 30, 40, 50, 60]), you’ll get back the result of 
10+20-30+40-50+60, or 50.
modreate : 10 mins. 

3) Write a function that partly emulates the built-in zip function . 
taking any number of iterables and returning a list of tuples. Each tuple will 
contain one element from each of the iterables passed to the function. 
Thus, if I call myzip([10, 20,30], 'abc'), the result will be [(10, 'a'), (20, 'b'), (30, 'c')]. 
You can return a list (not an iterator) and can assume that all of the iterables 
are of the same length.
moderate : 10 mins
