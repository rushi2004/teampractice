Things to Do

ex_8_1_to_5_e2f.py

8.1 Make an English-to-French dictionary called e2f and print it. Here are your starter words: dog is chien, 
cat is chat, and walrus is morse.


ex_8_1_to_5_e2f.py
8.2 Using your three-word dictionary e2f, print the French word for walrus.
# both 8.1 and8.2 simple : 5 

ex_8_1_to_5_e2f.py
8.3 Make a French-to-English dictionary called f2e from e2f. Use the items method.
simple : 5 mins. 

ex_8_1_to_5_e2f.py
8.4 Print the English equivalent of the French word chien.
8.3 and 8.4 5 minutes. 

ex_8_1_to_5_e2f.py
8.5 Print the set of English words from e2f.
simple 

ex_8_6_to_9_multi_level.py

8.6 Make a multilevel dictionary called life. Use these strings for the 
topmost keys: 'animals', 'plants', and 'other'. 
Make the 'animals' key refer to another dictionary 
with the keys 'cats', 'octopi', and 'emus'. Make the 'cats' key 
refer to a list of strings with the values 'Henri', 'Grumpy', and 'Lucy'. 
Make all the other keys refer to empty dictionaries.
simple : 5mins 

ex_8_6_to_9_multi_level.py
8.7 Print the top-level keys of life.
simple : 5 mins. 

ex_8_6_to_9_multi_level.py
8.8 Print the keys for life['animals'].
simple : 5 mins. 

ex_8_6_to_9_multi_level.py
8.9 Print the values for life['animals']['cats'].
simple : 5 mins. 

ex_8_10_to_12_dict_comps.py
8.10 Use a dictionary comprehension to create the dictionary squares. 
Use range(10) to return the keys, and use the square of each key as its value.
simple: 5 mins 

ex_8_10_to_12_dict_comps.py
8.11 Use a set comprehension to create the set odd from the odd numbers in range(10).
simple : 5 mins. 

ex_8_10_to_12_dict_comps.py
8.12 Use a generator comprehension to return the string 'Got ' and 
a number for the numbers in range(10). Iterate through this by using a for loop.
do reeseach : 10 mins. 

ex_8_13_to_15_dict_comps.py
8.13 Use zip() to make a dictionary from the key tuple ('optimist', 'pessimist', 'troll') and 
the values tuple ('The glass is half full', 'The glass is half empty', 'How did you get a glass?').
5 mins. 

8.14 Use zip() to make a dictionary called movies that pairs these lists: 
titles = ['Creature of Habit', 'Crewel Fate', 'Sharks On a Plane'] 
and plots = ['A nun turns into a monster', 'A haunted yarn shop', 'Check your exits']
5 mins. 

From another book. 

Exercise 12  Word with most repeated letters
That is, if words is set to
words = ['this', 'is', 'an', 'elementary', 'test', 'example']
answer is elementary. 
moderate 20 mins. 

Exercise 12  Usernames with passwords. 

Create a dict in which the keys are usernames and the values are passwords, both represented as strings.
Create a tiny login system, in which the user must enter a username and password. 
If there is a match, then indicate that the user has successfully logged in. If not, then refuse them entry.
(Note: This is a nice little exercise, but please never store unencrypted passwords. It’s a major security risk.)
Simple 10 mins

Define a dict whose keys are dates (represented by strings) from the most recent week and whose 
values are temperatures. Ask the user to enter a date, 
and display the temperature on that date, as well as the previous and subsequent dates, if available.
Simple 10 mins

Define a dict whose keys are names of people in your family, and whose values are their birth dates, 
as represented by Python date objects (http://mng.bz/ jggr). Ask the user to enter the 
name of someone in your family, and have the program calculate how many days old that person is.
Moderate 10 mins

Another use for dicts is to accumulate data over the life of a program. In this exercise, 
you’ll use a dict for just that

When the user enters a blank city name, the program exits--but first, 
it reports how much total rainfall there was in each city. Thus, if I enter

Boston
5
New York
7
Boston
5
[Enter; blank line]
the program should output
Boston: 10
New York: 7

Instead of printing just the total rainfall for each city, print the total rainfall and the 
average rainfall for reported days. 
Thus, if you were to enter 30, 20, and 40 for Boston, you would see that the total 
was 90 and the average was 30.
hard = 20 mins 

Examle. 
Write af function called dictdiff. 

dictdiff
d1 = {'a':1, 'b':2, 'c':3}
d2 = {'a':1, 'b':2, 'c':4}


print(dictdiff(d1, d1))  = {}
print(dictdiff(d1, d2))  = {'c': [3, 4]}


d3 = {'a':1, 'b':2, 'd':3}
d4 = {'a':1, 'b':2, 'c':4}
print(dictdiff(d3, d4))
Prints “{'c': [None, 4], 'd': [3, None]}”, because d4 has c:4 and d3 has d:3

d5 = {'a':1, 'b':2, 'd':4}
print(dictdiff(d1, d5))  
Prints “{'c': [3, None], 'd': [None, 4]}”, because d1 has c:3 and d5 has d:4
hard : 45 mins to an hour. 

Try. 
Here are some things you can try to work with sets even more:

Read through a server (e.g., Apache or nginx) log file. What were the different IP addresses 
that tried to access your server?




